Inl√§mningsuppgift 2

Ett exempel p√• ett agilt projekt √§r en personlig tr√§ningsapp som jag kommer att anv√§nda
som ett exempel f√∂r att f√∂rklara hela processen n√§r jag t√§nker p√• att g√∂ra en plan f√∂r att
bygga upp denna app.

Planeringsfas :
F√∂rst och fr√§mst m√•ste jag planera hur jag ska bygga upp denna tr√§ningsapp och d√§rf√∂r
m√•ste jag g√∂ra det genom att dela den i olika steg:
- 1-Identifiera vad appen ska g√∂ra och visionen och m√•let av denna app som jag
t√§nker p√• att bygga upp. Visionen med denna app √§r att jag skapar en app som
hj√§lper anv√§ndaren med att f√∂lja upp sina tr√§ningspass och att planera sina
tr√§ningstider. M√•let ska vara l√§ttanv√§nd och syftar p√• att f√∂rb√§ttra tr√§ningen hos
anv√§ndarna. Och i det steget viktigt att t√§nka p√• tre olika saker :
- ‚Ä¢ Anv√§ndning Registrering , att anv√§ndarna ska kunna skapa kontot och logga in
f√∂r att spara sina information. Jag ska t√§nka p√• vad appen beh√∂ver f√∂r att
anv√§ndarna ska kunna anv√§nda den och d√§rf√∂r m√•ste man ha grundl√§ggande
funktioner s√•som att registrera och logga in i appen , att man kan skapa en
anv√§ndarprofil, att man kunna f√∂lja olika tr√§ningsprogram eller pass.
- ‚Ä¢ Tr√§ningsprogram: Att l√§gga upp ett tr√§ningsprogram eller hur passet ska utf√∂ras
ska anv√§ndarna f√∂lja upp dem. Och tr√§ningsaktiviteter, dessutom ska den inneh√•lla
bilder och videos f√∂r tr√§ningar f√∂r att underl√§tta f√∂r anv√§ndarna att anv√§nda sig av
appen och att det finns m√∂jlighet till att koppla fitness enheter till appen exempelvis
smartklocka.
- ‚Ä¢Betalningar och varukorg, om jag vill s√§lja tr√§ningsapp eller andra produkter, d√•
jag ger m√∂jlighet till anv√§ndarna att kunna l√§gga till sakerna som de vill k√∂pa till en
varukorg och d√• kan dem betala s√§kert ( l√§ngre ner kommer jag att ge olika f√∂rslag
p√• olika betalningsmetoder)
2-Dela upp dessa arbetet i sm√• delar eller olika sprintar( exempel vi ge oss 2 veckor
perioder) f√∂r att utveckla anv√§ndning registrering, eller utveckla det f√∂rsta tr√§ningsprogram
som vi har skapat, och anv√§nder oss av exempelvis av Trello eller Asana som en
planeringsverktyg f√∂r att underl√§ttar f√∂r oss vad √§r som vi beh√∂ver h√•lla koll p√• och vad √§r
som saknas och beh√∂ver g√∂ras.
3- H√§r t√§nkte jag att prioritera vad som √§r det viktigaste , och det √§r st√∂rsta nytta s√§ttet f√∂r
anv√§ndarna, g√§llande b√•de registrering och tr√§ningspass.
Iteration 1: H√§r b√∂rjar jag med grunderna s√•som att skapa registreringssystem och anv√§nda
olika verktyg f√∂r att kunna hantera konton s√•som Node.js eller Django. √Ñven vi beh√∂ver ett
verktyg f√∂r att g√∂ra registreringsformul√§ret, d√• beh√∂ver exempelvis anv√§nda ett frontend
verktyg s√•som React or Angular. Och sedan beh√∂ver vi t√§nka att anv√§ndarna ska kunna
spara sina information, d√• beh√∂ver vi anv√§nda en databas f√∂r att kunna spara
informationerna s√•som MongoDB eller PostgreSQL.
Iteration 2: Utveckla k√∂p och betalningsfunktioner
Att skapa en funktion ( l√§gg till varukorg) f√∂r att anv√§ndarna kunna l√§gga till produkterna som
de vill k√∂pa eller tr√§ningspass, och sj√§lvklart ger m√∂jlighet till att de √§ndrar eller tar bort saker
innan betalning sker.
Att l√§gga till betalningsfunktioner s√•som Stripe eller Payplay f√∂r att g√∂ra betalningar s√§krare
och √§ven skapa backend f√∂r att kunna ta emot betalningar och anv√§ndarna f√•r ett
bekr√§ftelse.
Att f√∂rb√§ttra tr√§ningsprogram och l√§gga till olika detaljer och ge m√∂jlighet att l√§mna
omd√∂men och g√∂ra en snygg och enkel designen att anv√§nda ( Jag kommer skriva mer
detaljer i n√§stkommande steg)
Iteration 3: vi beh√∂ver l√§gga till mer avancerade funktioner: att snap orderhanteringssystem,
och g√∂r att anv√§ndarna ska kunna se sina k√∂p och tr√§ningsprogram som de har betalat f√∂r
och f√• kvittot och dessutom anv√§ndarna ska kunna f√∂lja sina tr√§ningspass . Och att l√§gga till
s√∂kfunktionen till anv√§ndarna (s√∂kruta) d√• kan anv√§ndarna l√§tt att hitta olika tr√§ningspass ,
det √§r viktigt att s√∂kningen ska vara l√§tt att hitta vad man letar efter och √§ven visar relevanta
resultat.
Designen √§r det viktigt. N√§r det kommer till designen s√• beh√∂ver jag t√§nka p√• tv√• saker:
designa appen och tekniska planen, att designa appen s√• ska jag rita med enkla bilder hur
appen ska se ut och hur den fungerar. Det kan vara bra att visa dessa skisser till andra
personer och h√∂ra deras √•sikter ( Testa ).
N√§r det g√§ller den tekniska planeten f√∂r appen s√• m√•ste jag best√§mma vilka verktyg som
beh√∂vs och vilka teknologier som ska anv√§ndas f√∂r att bygga appen.
Efter dessa steg m√•ste jag t√§nka p√• utvecklingen av appen hur ska jag kunna utveckla
appen man kan g√∂ra det i olika steg :
- Grundfunktionen: m√•let √§r att skapa enkla versioner d√§r anv√§ndaren kan
registrera sig och logga in p√• ett enkelt s√§tt. Uppgifterna i det steget √§r att
anv√§ndarprofiler och designa startsidan.
- Tr√§ningsprogram: m√•let att l√§gga funktioner f√∂r olika tr√§ningsprogram. Uppgifterna
√§r att hantera och att skapa ett tr√§ningsprogram.
- Guider och olika anpassningar: m√•let att l√§gga till olika anpassningar och
tr√§ningsguider. Uppgifterna √§r att l√§gga ut olika videos p√• tr√§nings√∂vningar och ge
anv√§ndare m√∂jlighet att anpassa tr√§ningsprogrammet och l√§gga till
rekommendationer utifr√•n anv√§ndarnas framsteg.
- Integration och olika p√•minnelser : m√•let med detta √§r att p√•minna anv√§ndaren
om tr√§ningen. Att st√§lla in att appen kan ge signal eller anv√§ndare f√• meddelande n√§r
det √§r dags att tr√§na. Och att koppla till fitness enheter att appen kan prata med
smartklockor eller annat som pulsm√§tare. Och sista ska jag kontrollera om dess
funktioner fungerar som det ska och l√∂sa problem om den dyker upp.
Efter utveckling kommer Testning och h√§r ska jag testa appen och g√∂ra olika kontroller
s√•som funktionstestning vilket inneb√§r att kontrollera alla nya funktioner och
integrationstestning genom att kontrollera att alla funktioner funkar ihop. Sedan g√∂r jag en
Beta testning
genom att ge anv√§ndaren m√∂jlighet att anv√§nda appen och ge sina √•sikter om appen. Jag
tar emot deras feedback f√∂r att f√∂rb√§ttra appen p√• ett b√§ttre s√§tt.
Efter testning kommer Lansering och h√§r beh√∂ver jag t√§nka p√• tv√• olika saker:
Att publicera appen, genom att ladda upp appen p√• Google play eller App Store och
skriver ocks√• en kort beskrivning om denna app, ska beskrivningen av appen vara kort och
tydlig.
Att marknadsf√∂ra: genom att sprida information om appen p√• sociala medier och att
ber√§tta om appen i olika kanaler och ger tips f√∂r att visa anv√§ndaren hur de kan komma
ig√•ng med appen.
Sista steg √§r underh√•llning och att uppdatera
H√§r beh√∂ver jag samla in alla feedback som jag f√•tt av anv√§ndaren och ta reda p√• (
Analysera) vad √§r det som fungerar bra och vad √§r det som √§r mindre bra och beh√∂ver
f√∂rb√§ttras √§ven fixa problemet om det uppstod och √§ven support ska finnas alltid f√∂r att l√∂sa
problemet eller om n√•gon anv√§ndare har n√•n fr√•ga. I uppdateringen ska jag l√§gga till nya
funktioner som matchar anv√§ndarens behov och efterfr√•gan, och √•tg√§rder om det finns
n√•got problem.
Nyckelkomponenter:
‚Ä¢Front-end ramverk : det √§r en del av appen och vad anv√§ndarna ser och i det
bygger appen designen och hj√§lper till att bygga anv√§ndarens upplevelser och √§ven
andra olika visuella delarna s√•som :
Angular , vue .js och React: syftet med anv√§ndningen √§r att att kunna skapa
anv√§ndargr√§nssnittet och d√§r kan anv√§ndaren logga in och se olika tr√§ningsprogram,
man kan ocks√• bygga interaktiva funktioner f√∂r att kan visa till anv√§ndarna
tr√§ningsvideor och att registrera tr√§ningspass.
Front- end ramverk kan ocks√• kommunicera med back-end API som hj√§lper till att
h√§mtar och skickar data s√•som att g√∂ra olika uppdateringar f√∂r anv√§ndarens schema
och tr√§ningspass.
‚Ä¢Back-end API: syftet med den att sk√∂ta alla dokumentations data mellan b√•de
anv√§ndarna och databasen , det vill s√§ga att hantera dessa dokument.
I en personlig tr√§ningsapp kan vi anv√§nda Node.js och spring Boot f√∂r att bygga
API:et som g√∂r att man kan hantera olika dataf√∂rfr√•gningar och √§ven att hantera
registreringen av anv√§ndarna. API:t kan ocks√• hantera olika uppdateringar av
tr√§ningsplaner och skickar till anv√§ndarna tips eller notifieringar .
‚Ä¢Databasen inneh√•ller olika saker s√•som anv√§ndaruppgifter, olika tr√§ningspass och
program. I en personlig tr√§ningsapp. I tr√§ningsapp kan vi anv√§nda ( MysQL or
PostgerSQL) detta anv√§nds f√∂r att strukturera datan, exempel som schema och
tr√§ningspass och vidare . ( MongoDB) denna √§r ett alternativ om man vill hantera
ostrukturerad f√∂r√§ndring av datan, s√•som kommentarer eller man vill spara en
tr√§ningspass.
Appen kommunicerar med databasen via back- end APl:t i fall anv√§ndare g√∂ra en
uppdatering om sitt m√•r eller en tr√§ningspass.
‚óè Betalning Gateway och integration : f√∂r att g√∂ra s√§kra betalningar f√∂r tj√§nster
som anv√§ndarna k√∂per inom appen. Man kan anv√§nda ( Paypal , Stripe or
Braintree) och dessa anv√§nds f√∂r att implementera betalningar i appen. Det
kan vara ett abonnemang eller k√∂p av produkter som finns i appen eller ett
tr√§ningspass. Syftet med det att hantera s√§kerheten f√∂r betalningar. √Ñven
appen kan hantera anv√§ndarens abonnemang och betalningsprocesser och
skickar faktorer till anv√§ndarna.
Ha en trevlig dag! üòä
// Mahmoud